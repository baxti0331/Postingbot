import time
import threading
from datetime import datetime, timedelta
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, Filters

TOKEN = '7367812518:AAGNc4pmBjrTfGlOU1Tg0ZF-i8VBC4Qugjo'

bot = Bot(token=TOKEN)
updater = Updater(token=TOKEN, use_context=True)
dispatcher = updater.dispatcher

scheduled_posts = []
target_channels = []  # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
user_states = {}

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
def start(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("‚ûï –ü–ª–∞–Ω–æ–≤—ã–π –ø–æ—Å—Ç", callback_data='schedule_post')],
        [InlineKeyboardButton("üìÖ –°–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö", callback_data='show_scheduled')],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data='add_channel')],
        [InlineKeyboardButton("üì¢ –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤", callback_data='show_channels')],
    ]
    update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    user_id = query.from_user.id

    if query.data == 'schedule_post':
        query.message.reply_text("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:")
        user_states[user_id] = {'step': 'waiting_text'}

    elif query.data == 'show_scheduled':
        if scheduled_posts:
            msg = "\n".join([f"{i+1}. {p['datetime'].strftime('%d.%m %H:%M')} - {p['content']}" for i, p in enumerate(scheduled_posts)])
            query.message.reply_text(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:\n{msg}")
        else:
            query.message.reply_text("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–µ—Ç.")

    elif query.data == 'add_channel':
        query.message.reply_text("–û—Ç–ø—Ä–∞–≤—å username –∫–∞–Ω–∞–ª–∞ (—Å @) –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π chat_id:")
        user_states[user_id] = {'step': 'waiting_channel'}

    elif query.data == 'show_channels':
        if target_channels:
            msg = "\n".join([f"{i+1}. {ch}" for i, ch in enumerate(target_channels)])
            query.message.reply_text(f"–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:\n{msg}")
        else:
            query.message.reply_text("–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def handle_text(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    state = user_states.get(user_id, {})

    if state.get('step') == 'waiting_text':
        user_states[user_id]['content'] = update.message.text
        user_states[user_id]['step'] = 'waiting_date'
        show_calendar(update.message)

    elif state.get('step') == 'waiting_time':
        try:
            time_obj = datetime.strptime(update.message.text.strip(), "%H:%M").time()
            date_obj = datetime.strptime(state['date'], "%Y-%m-%d").date()
            post_datetime = datetime.combine(date_obj, time_obj)
            scheduled_posts.append({
                'content': state['content'],
                'datetime': post_datetime,
                'channels': target_channels.copy()
            })
            update.message.reply_text(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {post_datetime.strftime('%d.%m %H:%M')}")
            user_states.pop(user_id)
        except ValueError:
            update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –∫–∞–∫ –ß–ß:–ú–ú")

    elif state.get('step') == 'waiting_channel':
        channel = update.message.text.strip()
        if channel.startswith("@") or channel.lstrip('-').isdigit():
            target_channels.append(channel)
            update.message.reply_text(f"–ö–∞–Ω–∞–ª {channel} –¥–æ–±–∞–≤–ª–µ–Ω.")
            user_states.pop(user_id)
        else:
            update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ username —Å @ –∏–ª–∏ chat_id.")

    else:
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é.")

# –ö–∞–ª–µ–Ω–¥–∞—Ä—å –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
def show_calendar(message):
    today = datetime.now().date()
    keyboard = []
    for i in range(7):
        day = today + timedelta(days=i)
        btn = InlineKeyboardButton(day.strftime("%d.%m (%a)"), callback_data=f'select_date_{day.isoformat()}')
        keyboard.append([btn])
    message.reply_text("–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:", reply_markup=InlineKeyboardMarkup(keyboard))

# –í—ã–±–æ—Ä –¥–∞—Ç—ã –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
def calendar_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    user_id = query.from_user.id

    if query.data.startswith('select_date_'):
        date_str = query.data.replace('select_date_', '')
        if user_id in user_states:
            user_states[user_id]['date'] = date_str
            query.message.reply_text("–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–ß–ß:–ú–ú):")
            user_states[user_id]['step'] = 'waiting_time'

# –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
def scheduler_loop():
    while True:
        now = datetime.now()
        for post in scheduled_posts[:]:
            if now >= post['datetime']:
                for channel in post['channels']:
                    try:
                        bot.send_message(chat_id=channel, text=post['content'])
                        print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {channel}: {post['content']}")
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
                scheduled_posts.remove(post)
        time.sleep(30)

# –ó–∞–ø—É—Å–∫
threading.Thread(target=scheduler_loop, daemon=True).start()
dispatcher.add_handler(CommandHandler("start", start))
dispatcher.add_handler(CallbackQueryHandler(button_handler, pattern='^(schedule_post|show_scheduled|add_channel|show_channels)$'))
dispatcher.add_handler(CallbackQueryHandler(calendar_handler, pattern='^select_date_'))
dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_text))

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
updater.start_polling()
updater.idle()
